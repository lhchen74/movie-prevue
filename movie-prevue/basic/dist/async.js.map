{"version":3,"sources":["../src/async.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","readFile","cb","err","readFileAsync","path","Promise","resolve","reject","then","catch","co","util","promisify"],"mappings":";;;uEAqDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqBA,UAAU,gBAAV,CADrB;;AAAA;AACQC,4BADR;;AAEIA,+BAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,gCAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,I;;;;;;;AArDf,IAAMC,KAAKC,QAAQ,IAAR,CAAX;;AAGA,SAASC,QAAT,CAAmBC,EAAnB,EAAuB;AACnBH,OAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACE,GAAD,EAAMX,IAAN,EAAe;AACzC,YAAIW,GAAJ,EAASD,GAAGC,GAAH;AACTD,WAAG,IAAH,EAASV,IAAT;AACH,KAHD;AAIH;;AAED;AACAS,SAAS,UAACE,GAAD,EAAMX,IAAN,EAAe;AACpB,QAAI,CAACW,GAAL,EAAU;AACNX,eAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,gBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACH;AACJ,CALD;;AAQA;AACA,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCT,WAAGE,QAAH,CAAYI,IAAZ,EAAkB,UAACF,GAAD,EAAMX,IAAN,EAAe;AAC7B,gBAAIW,GAAJ,EAASK,OAAOL,GAAP,EAAT,KACKI,QAAQf,IAAR;AACR,SAHD;AAIH,KALM,CAAP;AAMH;;AAEDY,cAAc,gBAAd,EACKK,IADL,CACU,gBAAQ;AACVjB,WAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,YAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACH,CAJL,EAIOa,KAJP,CAIa,eAAO;AACZf,YAAQC,GAAR,CAAYO,GAAZ;AACH,CANL;;AASA;;AAEA,IAAMQ,KAAKX,QAAQ,IAAR,CAAX;AACA,IAAMY,OAAOZ,QAAQ,MAAR,CAAb;;AAEAW,yCAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACkBC,KAAKC,SAAL,CAAed,GAAGE,QAAlB,EAA4B,gBAA5B,CADlB;;AAAA;AACKT,wBADL;;AAECA,2BAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,4BAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAOA;AACA,IAAMN,YAAYqB,KAAKC,SAAL,CAAed,GAAGE,QAAlB,CAAlB;;AAQAH","file":"async.js","sourcesContent":["const fs = require('fs')\n\n\nfunction readFile (cb) {\n    fs.readFile('./package.json', (err, data) => {\n        if (err) cb(err)\n        cb(null, data)\n    })\n}\n\n// 1. callback\nreadFile((err, data) => {\n    if (!err) {\n        data = JSON.parse(data)\n        console.log(data.name)\n    }\n})\n\n\n// 2. promise\nfunction readFileAsync(path) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, (err, data) => {\n            if (err) reject(err)\n            else resolve(data)\n        })\n    })\n}\n\nreadFileAsync('./package.json')\n    .then(data => {\n        data = JSON.parse(data)\n        console.log(data.name)\n    }).catch(err => {\n        console.log(err)\n    })\n\n\n// 3. co + generator + promise\n\nconst co = require('co')\nconst util = require('util')\n\nco(function *() {\n    let data = yield util.promisify(fs.readFile)('./package.json')\n    data = JSON.parse(data)\n    console.log(data.name)\n})\n\n\n// 4. async\nconst readAsync = util.promisify(fs.readFile)\n\nasync function init() {\n    let data = await readAsync('./package.json')\n    data = JSON.parse(data)\n    console.log(data.name)\n}\n\ninit()"]}